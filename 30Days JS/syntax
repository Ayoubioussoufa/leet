Variables and Data Types:
Variables are declared using the var, let, or const keyword.
JavaScript has various data types, including numbers, strings, booleans, objects, arrays, null, and undefined.
javascript
Copy code
// Variable declaration
var age = 30;
let name = 'John';
const PI = 3.14;

// Data types
let num = 42; // Number
let message = 'Hello'; // String
let isTrue = true; // Boolean
let person = { name: 'John', age: 30 }; // Object
let colors = ['red', 'green', 'blue']; // Array
let noValue = null; // Null
let notDefined; // Undefined
Operators:
JavaScript supports various arithmetic, comparison, logical, assignment, and other operators.
javascript
Copy code
let a = 10;
let b = 5;

let sum = a + b; // Addition
let difference = a - b; // Subtraction
let product = a * b; // Multiplication
let quotient = a / b; // Division
let remainder = a % b; // Modulus (remainder)

let isEqual = a === b; // Strict equality comparison
let isNotEqual = a !== b; // Strict inequality comparison
let isGreater = a > b; // Greater than
let isLess = a < b; // Less than

let logicalAnd = true && false; // Logical AND
let logicalOr = true || false; // Logical OR
let logicalNot = !true; // Logical NOT

// Assignment operators: +=, -=, *=, /=, %=
let c = 3;
c += 2; // Equivalent to c = c + 2
Control Flow:
JavaScript provides conditional statements and loops to control the flow of execution.
javascript
Copy code
// if-else statement
let num = 10;
if (num > 0) {
    console.log('Positive');
} else if (num < 0) {
    console.log('Negative');
} else {
    console.log('Zero');
}

// for loop
for (let i = 1; i <= 5; i++) {
    console.log(i);
}

// while loop
let count = 0;
while (count < 5) {
    console.log(count);
    count++;
}

// switch statement
let day = 'Monday';
switch (day) {
    case 'Monday':
        console.log('Start of the week');
        break;
    case 'Tuesday':
    case 'Wednesday':
    case 'Thursday':
        console.log('Middle of the week');
        break;
    case 'Friday':
        console.log('End of the week');
        break;
    default:
        console.log('Weekend');
}
Functions:
Functions are blocks of reusable code that can take arguments and return values.
javascript
Copy code
// Function declaration
function add(a, b) {
    return a + b;
}

// Function expression (anonymous function)
const subtract = function(a, b) {
    return a - b;
};

// Arrow function (ES6+)
const multiply = (a, b) => a * b;
Objects and Classes:
JavaScript allows you to create objects and classes to organize and encapsulate data and behavior.
javascript
Copy code
// Object literal
const person = {
    name: 'John',
    age: 30,
    greet: function() {
        console.log('Hello, ' + this.name);
    }
};

person.greet(); // Output: Hello, John

// Class (ES6+)
class Rectangle {
    constructor(width, height) {
        this.width = width;
        this.height = height;
    }

    area() {
        return this.width * this.height;
    }
}

const rectangle1 = new Rectangle(5, 10);
console.log(rectangle1.area()); // Output: 50
Arrays and Array Methods:
Arrays in JavaScript are dynamic collections of elements.
javascript
Copy code
const fruits = ['apple', 'banana', 'orange'];

// Access elements
console.log(fruits[0]); // Output: 'apple'

// Add elements
fruits.push('grape'); // Adds 'grape' to the end
fruits.unshift('kiwi'); // Adds 'kiwi' to the beginning

// Remove elements
fruits.pop(); // Removes the last element ('grape')
fruits.shift(); // Removes the first element ('kiwi')

// Iterating over arrays
fruits.forEach((fruit) => {
    console.log(fruit);
});

// Filter
const filteredFruits = fruits.filter((fruit) => fruit !== 'banana');
console.log(filteredFruits); // Output: ['apple', 'orange']

// Map
const capitalizedFruits = fruits.map((fruit) => fruit.toUpperCase());
console.log(capitalizedFruits); // Output: ['APPLE', 'BANANA', 'ORANGE']

// Reduce
const sum = fruits.reduce((total, fruit) => total + fruit.length, 0);
console.log(sum); // Output: 15 (5 + 6 + 4)
This overview covers the core syntax and features of JavaScript. There is much more to learn, such as error handling, asynchronous programming with promises and async/await, and working with DOM (Document Object Model) to manipulate web pages. JavaScript is continuously evolving, and newer versions of the language bring additional features and improvements. It's essential to practice and explore real-world examples to deepen your understanding of JavaScript.